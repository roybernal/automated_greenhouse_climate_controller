/*
--------------------------------------------------------------------
Project: Automated Greenhouse Climate Controller
--------------------------------------------------------------------
File: Json_firebase_adapted.ino
--------------------------------------------------------------------
Description: This code, adapted from the original Json_firebase,
integrates sensor reading and actuator control on an ESP8266.
It sends structured data to specific Firebase paths
(/latest_readings, /actuator_status) to sync with the web dashboard.
--------------------------------------------------------------------
Authors:
- Lucio Emiliano Ruiz Sepulveda
- Rodrigo Samuel Bernal Moreno
- Enrique Alfonso Gracian Castro
- Jesus Perez Rodriguez
--------------------------------------------------------------------
Last modification: October 6, 2025
--------------------------------------------------------------------
*/

// --- 1. LIBRARIES ---
#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClient.h>
#include <ArduinoJson.h> // You will need to install this library from the Library Manager

// --- 2. CREDENTIALS & CONFIGURATION ---
const char* WIFI_SSID = "upaep wifi";

const char* FIREBASE_HOST = "agcroller-default-rtdb.firebaseio.com";

// --- 3. PIN DEFINITIONS ---
// NOTE: The original file had conflicting pin definitions.
// I am using the standard pins for this setup.
const int DHT_PIN = D2;
#define DHTTYPE DHT22 // Using DHT22 as it's more accurate

const int LIGHT_SENSOR_PIN = A0;
const int FAN_RELAY_PIN = D5;
const int HEATER_RELAY_PIN = D6; // Assuming heater is on a second relay

// --- 4. GLOBAL OBJECTS & VARIABLES ---
DHT dht(DHT_PIN, DHTTYPE);
WiFiClient client;
unsigned long previousMillis = 0;
const long interval = 5000; // Send data every 5 seconds

// --- 5. SETUP FUNCTION ---
void setup() {
  Serial.begin(115200);
  dht.begin();

  pinMode(FAN_RELAY_PIN, OUTPUT);
  pinMode(HEATER_RELAY_PIN, OUTPUT);
  digitalWrite(FAN_RELAY_PIN, HIGH); // Start with actuators OFF
  digitalWrite(HEATER_RELAY_PIN, HIGH);

  connectToWifi();
}

// --- 6. MAIN LOOP ---
void loop() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("\nWiFi connection lost. Reconnecting...");
    connectToWifi();
  }

  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;

    // Read sensor data
    float temperature = dht.readTemperature();
    float humidity = dht.readHumidity();
    int light_level = analogRead(LIGHT_SENSOR_PIN);

    // Get current actuator status
    bool isFanOn = (digitalRead(FAN_RELAY_PIN) == LOW); // LOW means ON for active-low relays
    bool isHeaterOn = (digitalRead(HEATER_RELAY_PIN) == LOW);

    // Send all data to Firebase
    updateFirebase(temperature, humidity, light_level, isFanOn, isHeaterOn);
  }
}

// --- 7. WIFI CONNECTION FUNCTION ---
void connectToWifi() {
  WiFi.begin(WIFI_SSID);
  Serial.print("Connecting to ");
  Serial.print(WIFI_SSID);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi connected!");
  Serial.print("IP: ");
  Serial.println(WiFi.localIP());
}

// --- 8. FIREBASE UPDATE FUNCTION (ADAPTED) ---
void updateFirebase(float temp, float hum, int light, bool fanStatus, bool heaterStatus) {
  HTTPClient http;
  
  // --- A. Update latest_readings ---
  StaticJsonDocument<200> readingsDoc;
  readingsDoc["temperature"] = temp;
  readingsDoc["humidity"] = hum;
  readingsDoc["light_received"] = light; // Matches the key from your console log
  readingsDoc["timestamp"] = millis();

  String jsonReadings;
  serializeJson(readingsDoc, jsonReadings);

  String url_readings = "https://" + String(FIREBASE_HOST) + "/latest_readings.json";
  http.begin(client, url_readings);
  http.addHeader("Content-Type", "application/json");
  
  int httpCodeReadings = http.PUT(jsonReadings); // Overwrite latest data
  
  if (httpCodeReadings == 200) {
    Serial.println("-> latest_readings updated successfully.");
  } else {
    Serial.printf("[HTTP] Failed to update latest_readings. Code: %d\n", httpCodeReadings);
  }
  http.end();

  // --- B. Update actuator_status ---
  StaticJsonDocument<100> actuatorDoc;
  actuatorDoc["fan"] = fanStatus;
  actuatorDoc["heater"] = heaterStatus;
  // Add other actuators like "lights" if needed
  // actuatorDoc["lights"] = lightStatus;

  String jsonActuators;
  serializeJson(actuatorDoc, jsonActuators);

  String url_actuators = "https://" + String(FIREBASE_HOST) + "/actuator_status.json";
  http.begin(client, url_actuators);
  http.addHeader("Content-Type", "application/json");

  int httpCodeActuators = http.PUT(jsonActuators); // Overwrite actuator status

  if (httpCodeActuators == 200) {
    Serial.println("-> actuator_status updated successfully.");
  } else {
    Serial.printf("[HTTP] Failed to update actuator_status. Code: %d\n", httpCodeActuators);
  }
  http.end();
}